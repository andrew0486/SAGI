package com.sagi.logic;
// Generated 11-dic-2013 13:19:53 by Hibernate Tools 3.2.1.GA


import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

/**
 * Employees generated by hbm2java
 */
public class Employees  implements java.io.Serializable {


	private int employeeId;
	public static final String DOCUMENT_TYPE_CITIZENSHIP="Cedula Ciudadania";
	/**
	 * if document type id stranger
	 */
	public static final String DOCUMENT_TYPE_STRANGER="Cedula Extranjería";
	/**
	 * if document type is nit
	 */
	public static final String DOCUMENT_TYPE_NIT="NIT";
	/**
	 *  ARRAY DOCUMENTS TYPE OF PERSONS
	 */
	public static final String[] DOCUMENT_TYPES={
		DOCUMENT_TYPE_CITIZENSHIP,
		DOCUMENT_TYPE_STRANGER
	};		
	/**
	 * 
	 */
	public static final String ACTIVE_STATE_DISABLE="INACTIVO";
	/**
	 * 
	 */
	public static final String ACTIVE_STATE_ENABLE="ACTIVO";
	/**
	 *  ARRAY USER STATUS
	 */
	public static final String[] ACTIVE_STATES={
		ACTIVE_STATE_DISABLE,
		ACTIVE_STATE_ENABLE
	};		
	private Functions functions;
	private Jobs jobs;
	private int jobId;
	private Subdirectorates subdirectorates;
	private int subdirectorateId;
	private Employees employees;
	private int managerID;
	private String firstName;
	private String lastName;
	private String streetAddress;
	private String city;
	private String phoneNumber;
	private String email;
	private String documentType;
	private String documentCity;
	private String documentNumber;
	private Date hireDate;
	private Date endDate;
	private String password;
	private boolean activeState;
	private boolean firstTime;
	private Set<Subdirectorates> subdirectorateses = new HashSet<Subdirectorates>(0);
	private Set<Resolution> resolutionsForEmpIdAuthorizeResolution = new HashSet<Resolution>(0);
	private Set<TechnicalConcept> technicalConceptsForEmpIdElaborateConcept = new HashSet<TechnicalConcept>(0);
	private Set<AutoStart> autoStartsForEmpIdElaborateAutoStart = new HashSet<AutoStart>(0);
	private Set<AutoStart> autoStartsForEmpIdAuthorizeAutoStart = new HashSet<AutoStart>(0);
	private Set<AutoRequirement> autoRequirementsForEmpIdAuthorizeRequirement = new HashSet<AutoRequirement>(0);
	private Set<Employees> employeeses = new HashSet<Employees>(0);
	private Set<JobHistory> jobHistories = new HashSet<JobHistory>(0);
	private Set<Notices> noticesesForEmpIdAuthorizeNotice = new HashSet<Notices>(0);
	private Set<Files> fileses = new HashSet<Files>(0);
	private Set<Processes> processeses = new HashSet<Processes>(0);
	private Set<Functions> functionses = new HashSet<Functions>(0);
	private Set<AutoRequirement> autoRequirementsForEmpIdElaborateRequirement = new HashSet<AutoRequirement>(0);
	private Set<Resolution> resolutionsForEmpIdElaborateResolution = new HashSet<Resolution>(0);
	private Set<TechnicalConcept> technicalConceptsForEmpIdAutorizeConcept = new HashSet<TechnicalConcept>(0);
	private Set<Notices> noticesesForEmpIdElaborateNotice = new HashSet<Notices>(0);

	public Employees() {
	}


	public Employees(int employeeId, String firstName, String lastName,
			String streetAddress, String city, String phoneNumber, String email, 
			String documentType, String documentCity, Date hireDate, String password, 
			boolean activeState) {
		this.employeeId = employeeId;
		this.firstName = firstName;
		this.lastName = lastName;
		this.streetAddress = streetAddress;
		this.city = city;
		this.phoneNumber = phoneNumber;
		this.email = email;
		this.documentType = documentType;
		this.documentCity = documentCity;
		this.hireDate = hireDate;
		this.password = password;
		this.activeState = activeState;
		this.firstTime = true;
	}

	public Employees(String firstName, String lastName,
			String streetAddress, String city, String phoneNumber, String email, 
			String documentType, String documentCity, String documentNumber) {
		this.firstName = firstName;
		this.lastName = lastName;
		this.streetAddress = streetAddress;
		this.city = city;
		this.phoneNumber = phoneNumber;
		this.email = email;
		this.documentType = documentType;
		this.documentCity = documentCity;
		this.documentNumber = documentNumber;
		this.hireDate = hireDate;
		this.password = documentNumber;
		this.activeState = activeState;
		this.firstTime = true;
	}

	public Employees(Functions functions, Jobs jobs, Subdirectorates subdirectorates, Employees employees,
			String firstName, String lastName, String streetAddress, String city, String phoneNumber, String email,
			String documentType, String documentCity, String documentNumber, Date hireDate, Date endDate, String password,
			boolean activeState, Set<Subdirectorates> subdirectorateses, Set<Resolution> resolutionsForEmpIdAuthorizeResolution, 
			Set<TechnicalConcept> technicalConceptsForEmpIdElaborateConcept, Set<AutoStart> autoStartsForEmpIdElaborateAutoStart, 
			Set<AutoStart> autoStartsForEmpIdAuthorizeAutoStart, Set<AutoRequirement> autoRequirementsForEmpIdAuthorizeRequirement, 
			Set<Employees> employeeses, Set<JobHistory> jobHistories, Set<Notices> noticesesForEmpIdAuthorizeNotice, Set<Files> fileses,
			Set<Processes> processeses, Set<Functions> functionses, Set<AutoRequirement> autoRequirementsForEmpIdElaborateRequirement, 
			Set<Resolution> resolutionsForEmpIdElaborateResolution, Set<TechnicalConcept> technicalConceptsForEmpIdAutorizeConcept,
			Set<Notices> noticesesForEmpIdElaborateNotice) {
		this.functions = functions;
		this.jobs = jobs;
		this.subdirectorates = subdirectorates;
		this.employees = employees;
		this.firstName = firstName;
		this.lastName = lastName;
		this.streetAddress = streetAddress;
		this.city = city;
		this.phoneNumber = phoneNumber;
		this.email = email;
		this.documentType = documentType;
		this.documentCity = documentCity;
		this.documentNumber = documentNumber;
		this.hireDate = hireDate;
		this.endDate = endDate;
		this.password = password;
		this.activeState = activeState;
		this.firstTime = true;
		this.subdirectorateses = subdirectorateses;
		this.resolutionsForEmpIdAuthorizeResolution = resolutionsForEmpIdAuthorizeResolution;
		this.technicalConceptsForEmpIdElaborateConcept = technicalConceptsForEmpIdElaborateConcept;
		this.autoStartsForEmpIdElaborateAutoStart = autoStartsForEmpIdElaborateAutoStart;
		this.autoStartsForEmpIdAuthorizeAutoStart = autoStartsForEmpIdAuthorizeAutoStart;
		this.autoRequirementsForEmpIdAuthorizeRequirement = autoRequirementsForEmpIdAuthorizeRequirement;
		this.employeeses = employeeses;
		this.jobHistories = jobHistories;
		this.noticesesForEmpIdAuthorizeNotice = noticesesForEmpIdAuthorizeNotice;
		this.fileses = fileses;
		this.processeses = processeses;
		this.functionses = functionses;
		this.autoRequirementsForEmpIdElaborateRequirement = autoRequirementsForEmpIdElaborateRequirement;
		this.resolutionsForEmpIdElaborateResolution = resolutionsForEmpIdElaborateResolution;
		this.technicalConceptsForEmpIdAutorizeConcept = technicalConceptsForEmpIdAutorizeConcept;
		this.noticesesForEmpIdElaborateNotice = noticesesForEmpIdElaborateNotice;
	}

	public int getEmployeeId() {
		return this.employeeId;
	}

	public void setEmployeeId(int employeeId) {
		this.employeeId = employeeId;
	}
	public Functions getFunctions() {
		return this.functions;
	}

	public void setFunctions(Functions functions) {
		this.functions = functions;
	}
	public Jobs getJobs() {
		return this.jobs;
	}

	public void setJobs(Jobs jobs) {
		this.jobs = jobs;
	}
	public Subdirectorates getSubdirectorates() {
		return this.subdirectorates;
	}

	public void setSubdirectorates(Subdirectorates subdirectorates) {
		this.subdirectorates = subdirectorates;
	}
	public Employees getEmployees() {
		return this.employees;
	}

	public void setEmployees(Employees employees) {
		this.employees = employees;
	}
	public String getFirstName() {
		return this.firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return this.lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getStreetAddress() {
		return this.streetAddress;
	}

	public void setStreetAddress(String streetAddress) {
		this.streetAddress = streetAddress;
	}
	public String getCity() {
		return this.city;
	}

	public void setCity(String city) {
		this.city = city;
	}
	public String getPhoneNumber() {
		return this.phoneNumber;
	}

	public void setPhoneNumber(String phoneNumber) {
		this.phoneNumber = phoneNumber;
	}
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}
	public String getDocumentType() {
		return this.documentType;
	}

	public void setDocumentType(String documentType) {
		this.documentType = documentType;
	}
	public String getDocumentCity() {
		return this.documentCity;
	}

	public void setDocumentCity(String documentCity) {
		this.documentCity = documentCity;
	}
	public String getDocumentNumber() {
		return this.documentNumber;
	}

	public void setDocumentNumber(String documentNumber) {
		this.documentNumber = documentNumber;
	}
	public Date getHireDate() {
		return this.hireDate;
	}

	public void setHireDate(Date hireDate) {
		this.hireDate = hireDate;
	}
	public Date getEndDate() {
		return this.endDate;
	}

	public void setEndDate(Date endDate) {
		this.endDate = endDate;
	}
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}
	public boolean isActiveState() {
		return this.activeState;
	}

	public String getActiveState(){
		String state="";
		if (isActiveState()==true) {
			state = "ACTIVO";
		}else{
			state = "INACTIVO";
		}
		return state;
	}

	public void setActiveState(boolean activeState) {
		this.activeState = activeState;
	}

	public void asigneActiveState(String activeState){
		if (activeState.equals("ACTIVO")) {
			setActiveState(true);
		}else{
			setActiveState(false);
		}
	}

	public boolean isFirstTime() {
		return this.firstTime;
	}

	public void setFirstTime(boolean firstTime) {
		this.firstTime = firstTime;
	}

	public Set<Subdirectorates> getSubdirectorateses() {
		return this.subdirectorateses;
	}

	public void setSubdirectorateses(Set<Subdirectorates> subdirectorateses) {
		this.subdirectorateses = subdirectorateses;
	}
	public Set<Resolution> getResolutionsForEmpIdAuthorizeResolution() {
		return this.resolutionsForEmpIdAuthorizeResolution;
	}

	public void setResolutionsForEmpIdAuthorizeResolution(Set<Resolution> resolutionsForEmpIdAuthorizeResolution) {
		this.resolutionsForEmpIdAuthorizeResolution = resolutionsForEmpIdAuthorizeResolution;
	}
	public Set<TechnicalConcept> getTechnicalConceptsForEmpIdElaborateConcept() {
		return this.technicalConceptsForEmpIdElaborateConcept;
	}

	public void setTechnicalConceptsForEmpIdElaborateConcept(Set<TechnicalConcept> technicalConceptsForEmpIdElaborateConcept) {
		this.technicalConceptsForEmpIdElaborateConcept = technicalConceptsForEmpIdElaborateConcept;
	}
	public Set<AutoStart> getAutoStartsForEmpIdElaborateAutoStart() {
		return this.autoStartsForEmpIdElaborateAutoStart;
	}

	public void setAutoStartsForEmpIdElaborateAutoStart(Set<AutoStart> autoStartsForEmpIdElaborateAutoStart) {
		this.autoStartsForEmpIdElaborateAutoStart = autoStartsForEmpIdElaborateAutoStart;
	}
	public Set<AutoStart> getAutoStartsForEmpIdAuthorizeAutoStart() {
		return this.autoStartsForEmpIdAuthorizeAutoStart;
	}

	public void setAutoStartsForEmpIdAuthorizeAutoStart(Set<AutoStart> autoStartsForEmpIdAuthorizeAutoStart) {
		this.autoStartsForEmpIdAuthorizeAutoStart = autoStartsForEmpIdAuthorizeAutoStart;
	}
	public Set<AutoRequirement> getAutoRequirementsForEmpIdAuthorizeRequirement() {
		return this.autoRequirementsForEmpIdAuthorizeRequirement;
	}

	public void setAutoRequirementsForEmpIdAuthorizeRequirement(Set<AutoRequirement> autoRequirementsForEmpIdAuthorizeRequirement) {
		this.autoRequirementsForEmpIdAuthorizeRequirement = autoRequirementsForEmpIdAuthorizeRequirement;
	}
	public Set<Employees> getEmployeeses() {
		return this.employeeses;
	}

	public void setEmployeeses(Set<Employees> employeeses) {
		this.employeeses = employeeses;
	}
	public Set<JobHistory> getJobHistories() {
		return this.jobHistories;
	}

	public void setJobHistories(Set<JobHistory> jobHistories) {
		this.jobHistories = jobHistories;
	}
	public Set<Notices> getNoticesesForEmpIdAuthorizeNotice() {
		return this.noticesesForEmpIdAuthorizeNotice;
	}

	public void setNoticesesForEmpIdAuthorizeNotice(Set<Notices> noticesesForEmpIdAuthorizeNotice) {
		this.noticesesForEmpIdAuthorizeNotice = noticesesForEmpIdAuthorizeNotice;
	}
	public Set<Files> getFileses() {
		return this.fileses;
	}

	public void setFileses(Set<Files> fileses) {
		this.fileses = fileses;
	}
	public Set<Processes> getProcesseses() {
		return this.processeses;
	}

	public void setProcesseses(Set<Processes> processeses) {
		this.processeses = processeses;
	}
	public Set<Functions> getFunctionses() {
		return this.functionses;
	}

	public void setFunctionses(Set<Functions> functionses) {
		this.functionses = functionses;
	}
	public Set<AutoRequirement> getAutoRequirementsForEmpIdElaborateRequirement() {
		return this.autoRequirementsForEmpIdElaborateRequirement;
	}

	public void setAutoRequirementsForEmpIdElaborateRequirement(Set<AutoRequirement> autoRequirementsForEmpIdElaborateRequirement) {
		this.autoRequirementsForEmpIdElaborateRequirement = autoRequirementsForEmpIdElaborateRequirement;
	}
	public Set<Resolution> getResolutionsForEmpIdElaborateResolution() {
		return this.resolutionsForEmpIdElaborateResolution;
	}

	public void setResolutionsForEmpIdElaborateResolution(Set<Resolution> resolutionsForEmpIdElaborateResolution) {
		this.resolutionsForEmpIdElaborateResolution = resolutionsForEmpIdElaborateResolution;
	}
	public Set<TechnicalConcept> getTechnicalConceptsForEmpIdAutorizeConcept() {
		return this.technicalConceptsForEmpIdAutorizeConcept;
	}

	public void setTechnicalConceptsForEmpIdAutorizeConcept(Set<TechnicalConcept> technicalConceptsForEmpIdAutorizeConcept) {
		this.technicalConceptsForEmpIdAutorizeConcept = technicalConceptsForEmpIdAutorizeConcept;
	}
	public Set<Notices> getNoticesesForEmpIdElaborateNotice() {
		return this.noticesesForEmpIdElaborateNotice;
	}

	public void setNoticesesForEmpIdElaborateNotice(Set<Notices> noticesesForEmpIdElaborateNotice) {
		this.noticesesForEmpIdElaborateNotice = noticesesForEmpIdElaborateNotice;
	}


	public boolean equalsEmployee(String documentNumber) {
		boolean exist=false;
		for ( Employees emp : this.employeeses) {
			if (emp.getDocumentNumber().equals(documentNumber)) {
				exist = true;
				break;
			}
		}
		return exist;
	}

	public boolean equalsSubdirectorate(Object subdirectorate) {
		if (subdirectorate instanceof Subdirectorates) {
			Subdirectorates sbd = (Subdirectorates)subdirectorate;
			return this.subdirectorates.getSubdirectorateName().equals(sbd.getSubdirectorateName());
		} else {
			return false;
		}
	}


	public int getJobId() {
		return jobId;
	}


	public void setJobId(int jobId) {
		this.jobId = jobId;
	}


	public int getSubdirectorateId() {
		return subdirectorateId;
	}


	public void setSubdirectorateId(int subdirectorateId) {
		this.subdirectorates = new Subdirectorates();
		this.subdirectorateId = subdirectorateId;
	}


	public int getManagerID() {
		return managerID;
	}


	public void setManagerID(int managerID) {
		this.managerID = managerID;
	}



}


